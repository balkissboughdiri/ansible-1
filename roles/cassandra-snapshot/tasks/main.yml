---
# Save the token ranges
- name: nodetool ring
  shell: ./nodetool -u {{ cassandra_user }} -pw {{ cassandra_pw }} ring | grep {{ ansible_default_ipv4.address }} | awk '{print $NF ","}' > {{ cassandra_data_dir }}/tokens
  args:  
    executable: /bin/bash 
    chdir: "{{ cassandra_home }}/current_cassandra/bin/"

# Format tokens so they are directly usable by initial_token
- name: Format tokens so they are directly usable by initial_token
  shell: sed -i -e ':a;N;$! ba;s/\n//g' -e 's/.$//g' {{ cassandra_data_dir }}/tokens
  args:  
    executable: /bin/bash
    warn: False
         
# Describe keyspaces schema 
- name: desc keyspaces schema 
  shell: ./cqlsh {{inventory_hostname}} -u {{ cassandra_user }} -p {{ cassandra_pw }} -e 'desc schema' > {{ cassandra_data_dir }}/full_schema.cql   
  args:
    executable: /bin/bash
    chdir: "{{ cassandra_home }}/current_cassandra/bin/"
      
# Run nodetool cleanup to ensure that invalid replicas are removed
- name: nodetool cleanup
  command: ./nodetool -u {{ cassandra_user }} -pw {{ cassandra_pw }} cleanup
  args:
    chdir: "{{ cassandra_home }}/current_cassandra/bin/"
  
# Create the snapshot hardlinks for the SSTables
- name: nodetool snapshot
  command: ./nodetool -u {{ cassandra_user }} -pw {{ cassandra_pw }} snapshot -t opsmaster
  args:
    chdir: "{{ cassandra_home }}/current_cassandra/bin/"

# Backup commands
# Incremental: dsmc incremental -su=yes <path>
# Full / archive: dsmc archive -su=yes -desc=<date> -archmc=<retention_policy> <path>

# Choose correct retention and backup command
- name: Set the correct retention policy depending on day of week and day of month
  set_fact:
    retention_policy: "R1Y"
  when: ansible_date_time.weekday == 'Saturday' and ansible_date_time.day <= 7
  
- name: Set the correct backup command depending on day of week and day of month
  set_fact:
    command_backup: "{{ command_archive }} -archmc={{ retention_policy }}"
  when: ansible_date_time.hour == 23
  
# Backup schema
- name: Backup schema
  shell: "{{ command_backup }} {{ cassandra_data_dir }}/full_schema.cql"
  args:
    executable: /bin/bash
  register: dsmc_schema_out
  failed_when: dsmc_schema_out.rc != 0
  #when: inventory_hostname == ansible_play_hosts | first
  
# Backup tokens
- name: Backup tokens
  shell:  "{{ command_backup }} {{ cassandra_data_dir }}/tokens"
  args:
    executable: /bin/bash
  register: dsmc_tokens_out
  failed_when: dsmc_tokens_out.rc != 0
  
# Backup elasticsearch indices
- name: Backup elasticsearch indices
  shell:  "{{ command_backup }} {{ cassandra_data_dir }}/nodes"
  args:
    executable: /bin/bash
  when: cassandra_extra_opts == "-e"
  register: dsmc_nodes_out
  failed_when: dsmc_nodes_out.rc != 0
  
# Find the snapshot directories
- name: Find the snapshot directories
  shell: find {{ cassandra_data_dir }}/ -exec sh -c 'printf "%s\n" "$0"' {} \; | grep -v system | grep opsmaster | xargs -n 1 echo $@ >> {{ cassandra_data_dir }}/filestobackup 
  args:
    executable: /bin/bash
  
# Upload to TSM
- name: Upload to TSM
  shell: "{{ command_backup }} -filelist={{ cassandra_data_dir }}/filestobackup" 
  args:
    executable: /bin/bash
  register: dsmc_out
  failed_when: dsmc_out.rc != 0

# Show backup outs
- name: Show backup results
  debug:
    var: dsmc_out

# Verify they are in TSM?  
#- name: Find the snapshot directories
#  command:  dsmc q ba {{ cassandra_data_dir }} 
#  args:
#    executable: /bin/bash
#  register: dsmc_ver_out
  
# Clear the snapshot
- name: nodetool clearsnapshot
  command: ./nodetool -u {{ cassandra_user }} -pw {{ cassandra_pw }} clearsnapshot -t opsmaster
  args:
    chdir: "{{ cassandra_home }}/current_cassandra/bin/"
    
# Remove temporary files
- name: Remove temporary files
  shell: > 
    rm {{ cassandra_data_dir }}/filestobackup {{ cassandra_data_dir }}/tokens {{ cassandra_data_dir }}/full_schema.cql
  args: 
    executable: /bin/bash
